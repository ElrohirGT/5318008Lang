class Color {
  let r: integer;
  let g: integer;
  let b: integer;

  function WithR(r: integer): Color {
      this.r = r;
      return this;
  }

  function WithG(g: integer): Color {
    this.g = g;
    return this;
  }

  function WithB(b: integer): Color {
    this.b = b;
    return this;
  }

  function ToArray(buffer: integer[]) {
    buffer[0] = this.r;
    buffer[1] = this.g;
    buffer[2] = this.b;
  }
}

let color = new Color();
let buffer = [0,0,0];
color
  .WithR(100)
  .WithG(100)
  .WithB(100)
  .ToArray(buffer);
---
ALLOC t21 13
// (this)
PARAM t21
// (newColor())
CALL Color_constructor 1
ALLOC t22 12
SWO t22 0 0
SWO t22 4 0
SWO t22 8 0
PARAM 100
// (previousInChain := color)
PARAM t21
// (color.WithR(100))
CALLRET t23 Color_WithR 1
PARAM 100
// (previousInChain := color.WithR(100))
PARAM t23
// (color.WithR(100).WithG(100))
CALLRET t24 Color_WithG 1
PARAM 100
// (previousInChain := color.WithR(100).WithG(100))
PARAM t24
// (color.WithR(100).WithG(100).WithB(100))
CALLRET t25 Color_WithB 1
// (buffer)
PARAM t22
// (previousInChain := color.WithR(100).WithG(100).WithB(100))
PARAM t25
// (color.WithR(100).WithG(100).WithB(100).ToArray(buffer))
CALL Color_ToArray 1

SEC Color_ToArray:
	// (this)
	LOAD t13
	// (buffer)
	LOAD t14
	LWO t15 t13 0
	LWO t16 t14 0
	= t16 i32 t15
	LWO t17 t13 4
	LWO t18 t14 4
	= t18 i32 t17
	LWO t19 t13 8
	LWO t20 t14 8
	= t20 i32 t19
SEC Color_WithB:
	// (this)
	LOAD t10
	// (b)
	LOAD t11
	= t12 i32 8
	SWO t10 t12 t11
	RETURN t10
SEC Color_WithG:
	// (this)
	LOAD t7
	// (g)
	LOAD t8
	= t9 i32 4
	SWO t7 t9 t8
	RETURN t7
SEC Color_WithR:
	// (this)
	LOAD t4
	// (r)
	LOAD t5
	= t6 i32 0
	SWO t4 t6 t5
	RETURN t4
SEC Color_constructor:
	= t1 i32 0
	= t2 i32 0
	= t3 i32 0
