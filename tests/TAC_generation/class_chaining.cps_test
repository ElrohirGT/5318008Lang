class Color {
  let r: integer;
  let g: integer;
  let b: integer;

  function WithR(r: integer): Color {
      this.r = r;
      return this;
  }

  function WithG(g: integer): Color {
    this.g = g;
    return this;
  }

  function WithB(b: integer): Color {
    this.b = b;
    return this;
  }

  function ToArray(buffer: integer[]) {
    buffer[0] = this.r;
    buffer[1] = this.g;
    buffer[2] = this.b;
  }
}

let color = new Color();
let buffer = [0,0,0];
color
  .WithR(100)
  .WithG(100)
  .WithB(100)
  .ToArray(buffer);
---
ALLOC t19 13
// (this)
PARAM t19
// (newColor())
CALL Color_constructor 1
ALLOC t20 12
SWO t20 0 0
SWO t20 4 0
SWO t20 8 0
PARAM 100
// (previousInChain := color)
PARAM t19
// (color.WithR(100))
CALLRET t21 Color_WithR 1
PARAM 100
// (previousInChain := color.WithR(100))
PARAM t21
// (color.WithR(100).WithG(100))
CALLRET t22 Color_WithG 1
PARAM 100
// (previousInChain := color.WithR(100).WithG(100))
PARAM t22
// (color.WithR(100).WithG(100).WithB(100))
CALLRET t23 Color_WithB 1
// (buffer)
PARAM t20
// (previousInChain := color.WithR(100).WithG(100).WithB(100))
PARAM t23
// (color.WithR(100).WithG(100).WithB(100).ToArray(buffer))
CALL Color_ToArray 1

SEC Color_ToArray:
	// (this)
	LOAD t11
	// (buffer)
	LOAD t12
	LWO t13 t11 0
	LWO t14 t12 0
	= t14 i32 t13
	LWO t15 t11 4
	LWO t16 t12 4
	= t16 i32 t15
	LWO t17 t11 8
	LWO t18 t12 8
	= t18 i32 t17
SEC Color_WithB:
	// (this)
	LOAD t8
	// (b)
	LOAD t9
	= t10 i32 8
	SWO t8 t10 t9
	RETURN t8
SEC Color_WithG:
	// (this)
	LOAD t5
	// (g)
	LOAD t6
	= t7 i32 4
	SWO t5 t7 t6
	RETURN t5
SEC Color_WithR:
	// (this)
	LOAD t2
	// (r)
	LOAD t3
	= t4 i32 0
	SWO t2 t4 t3
	RETURN t2
SEC Color_constructor:
	// (this)
	LOAD t1
	SWO t1 0 0
	SWO t1 4 0
	SWO t1 8 0
